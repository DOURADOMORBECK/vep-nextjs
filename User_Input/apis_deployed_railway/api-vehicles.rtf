{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ Hono \} from "hono";\
import postgres from "postgres";\
\
const db = postgres(process.env.DATABASE_URL!, \{\
  ssl: \{ rejectUnauthorized: false \},\
\});\
const app = new Hono();\
\
// Todas as posi\'e7\'f5es (limit 200)\
app.get("/positions", async (c) => \{\
  const result =\
    await db`SELECT * FROM ssx_positions ORDER BY update_date DESC LIMIT 200`;\
  return c.json(result);\
\});\
\
// \'daltima posi\'e7\'e3o de cada ve\'edculo\
app.get("/positions/latest", async (c) => \{\
  const result = await db`\
    SELECT DISTINCT ON (id_tracked_unit) *\
    FROM ssx_positions\
    ORDER BY id_tracked_unit, update_date DESC\
  `;\
  return c.json(result);\
\});\
\
// Stats gerais\
app.get("/positions/stats", async (c) => \{\
  const total =\
    await db`SELECT COUNT(DISTINCT id_tracked_unit) AS total FROM ssx_positions`;\
  const last = await db`SELECT MAX(update_date) AS last FROM ssx_positions`;\
  return c.json(\{ total: total[0]?.total || 0, last: last[0]?.last || null \});\
\});\
\
// Filtro por data (YYYY-MM-DDTHH:mm)\
app.get("/positions/range", async (c) => \{\
  const \{ start, end \} = c.req.query();\
  if (!start || !end) return c.json(\{ error: "Missing start/end" \}, 400);\
  const result = await db`\
    SELECT * FROM ssx_positions\
    WHERE event_date BETWEEN $\{start\} AND $\{end\}\
    ORDER BY update_date DESC\
  `;\
  return c.json(result);\
\});\
\
// Filtro: ve\'edculos com GPS v\'e1lido\
app.get("/positions/valid-gps", async (c) => \{\
  const result = await db`\
    SELECT * FROM ssx_positions\
    WHERE valid_gps = 'true'\
    ORDER BY update_date DESC\
    LIMIT 200\
  `;\
  return c.json(result);\
\});\
\
// Filtro: ve\'edculos com igni\'e7\'e3o ligada\
app.get("/positions/ignition-on", async (c) => \{\
  const result = await db`\
    SELECT * FROM ssx_positions\
    WHERE ignition = 'true' AND valid_gps = 'true'\
    ORDER BY update_date DESC\
    LIMIT 200\
  `;\
  return c.json(result);\
\});\
\
// Filtro: \'e1rea geogr\'e1fica (bounding box)\
app.get("/positions/area", async (c) => \{\
  const \{ minLat, maxLat, minLong, maxLong \} = c.req.query();\
  if (!minLat || !maxLat || !minLong || !maxLong) \{\
    return c.json(\{ error: "Missing bounding box params" \}, 400);\
  \}\
  const result = await db`\
    SELECT * FROM ssx_positions\
    WHERE CAST(lat AS DECIMAL) BETWEEN $\{minLat\} AND $\{maxLat\}\
      AND CAST(long AS DECIMAL) BETWEEN $\{minLong\} AND $\{maxLong\}\
      AND valid_gps = 'true'\
    ORDER BY update_date DESC\
    LIMIT 200\
  `;\
  return c.json(result);\
\});\
\
// Filtro: todas as posi\'e7\'f5es de um ve\'edculo espec\'edfico (via id_tracked_unit)\
app.get("/positions/vehicle/:id", async (c) => \{\
  const \{ id \} = c.req.param();\
  if (!id) return c.json(\{ error: "Missing vehicle id" \}, 400);\
  const result = await db`\
    SELECT * FROM ssx_positions\
    WHERE id_tracked_unit = $\{id\}\
    ORDER BY update_date DESC\
    LIMIT 200\
  `;\
  return c.json(result);\
\});\
\
// \'daltima posi\'e7\'e3o de um ve\'edculo espec\'edfico\
app.get("/positions/vehicle/:id/latest", async (c) => \{\
  const \{ id \} = c.req.param();\
  if (!id) return c.json(\{ error: "Missing vehicle id" \}, 400);\
  const result = await db`\
    SELECT * FROM ssx_positions\
    WHERE id_tracked_unit = $\{id\}\
    ORDER BY update_date DESC\
    LIMIT 1\
  `;\
  return c.json(result[0] || \{\});\
\});\
\
Bun.serve(\{ fetch: app.fetch, port: Number(process.env.PORT || 3000) \});\
}