import { Hono } from "hono";
import postgres from "postgres";

// --- DB Connection ---
const db = postgres(process.env.DATABASE_URL!, {
  ssl: { rejectUnauthorized: false },
});

// --- App ---
const app = new Hono();

// --- Cria tabelas se não existirem ---
await db`
  CREATE TABLE IF NOT EXISTS pessoas (
    fnc_pes_id INTEGER PRIMARY KEY,
    fnc_emp_id INTEGER,
    fnc_pes_data_cadastro DATE,
    fnc_pes_tipo_cadastro TEXT,
    fnc_pes_tipo_pessoa TEXT,
    fnc_pes_nome_fantasia TEXT,
    fnc_pes_razao_social TEXT,
    fnc_pes_cpf TEXT,
    fnc_pes_cnpj TEXT,
    fnc_pes_ie TEXT,
    fnc_pes_insc_municipal TEXT,
    fnc_pes_insc_suframa TEXT,
    fnc_pes_insc_produtor TEXT,
    fnc_pes_cep TEXT,
    fnc_pes_endereco TEXT,
    fnc_pes_numero TEXT,
    fnc_pes_complemento TEXT,
    fnc_pes_bairro TEXT,
    fnc_pes_cidade TEXT,
    fnc_pes_uf TEXT,
    fnc_pes_latitude TEXT,
    fnc_pes_longitude TEXT,
    fnc_pes_telefone_1 TEXT,
    fnc_pes_telefone_2 TEXT,
    fnc_pes_celular TEXT,
    fnc_pes_email TEXT,
    fnc_pes_email_financeiro TEXT,
    fnc_pes_contato TEXT,
    fnc_pes_status TEXT,
    fnc_pes_limite_de_credito NUMERIC,
    fnc_pes_dh_atualizacao TIMESTAMP
  );
`;

// Criar índices para melhor performance
await db`CREATE INDEX IF NOT EXISTS idx_pessoas_tipo_cadastro ON pessoas(fnc_pes_tipo_cadastro)`;
await db`CREATE INDEX IF NOT EXISTS idx_pessoas_cnpj ON pessoas(fnc_pes_cnpj)`;
await db`CREATE INDEX IF NOT EXISTS idx_pessoas_cpf ON pessoas(fnc_pes_cpf)`;
await db`CREATE INDEX IF NOT EXISTS idx_pessoas_status ON pessoas(fnc_pes_status)`;


// --- CUSTOMERS ENDPOINTS ---

// Listar todos os clientes
app.get("/customer", async (c) => {
  const { status, tipo_pessoa, limit, offset } = c.req.query();
  
  let conditions = [];
  let values = [];
  
  // Filtrar apenas clientes (assumindo que tipo_cadastro = 'CLIENTE')
  conditions.push("fnc_pes_tipo_cadastro = 'CLIENTE'");
  
  if (status) {
    conditions.push(`fnc_pes_status = $${conditions.length + 1}`);
    values.push(status);
  }
  
  if (tipo_pessoa) {
    conditions.push(`fnc_pes_tipo_pessoa = $${conditions.length + 1}`);
    values.push(tipo_pessoa);
  }
  
  const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';
  
  const query = `
    SELECT * FROM pessoas 
    ${whereClause}
    ORDER BY fnc_pes_nome_fantasia ASC 
    LIMIT ${limit || 100} 
    OFFSET ${offset || 0}
  `;
  
  const result = await db.unsafe(query, ...values);
  return c.json(result);
});

// Buscar cliente por ID
app.get("/customer/:id", async (c) => {
  const { id } = c.req.param();
  const result = await db`
    SELECT * FROM pessoas 
    WHERE fnc_pes_id = ${id} 
    AND fnc_pes_tipo_cadastro = 'CLIENTE'
  `;
  
  if (!result.length) {
    return c.json({ error: "Cliente não encontrado" }, 404);
  }
  
  return c.json(result[0]);
});

// Buscar cliente por CNPJ/CPF
app.get("/customer/document/:document", async (c) => {
  const { document } = c.req.param();
  const result = await db`
    SELECT * FROM pessoas 
    WHERE (fnc_pes_cnpj = ${document} OR fnc_pes_cpf = ${document})
    AND fnc_pes_tipo_cadastro = 'CLIENTE'
  `;
  
  if (!result.length) {
    return c.json({ error: "Cliente não encontrado" }, 404);
  }
  
  return c.json(result[0]);
});

// Criar novo cliente
app.post("/customer", async (c) => {
  const data = await c.req.json();
  
  // Validação básica
  const requiredFields = ['tipo_pessoa', 'nome_fantasia', 'email', 'endereco', 'numero', 'bairro', 'cidade', 'uf', 'cep'];
  for (const field of requiredFields) {
    if (!data[field]) {
      return c.json({ error: `Campo ${field} é obrigatório` }, 400);
    }
  }
  
  // Validação de documento
  if (data.tipo_pessoa === 'PJ' && !data.cnpj) {
    return c.json({ error: "CNPJ é obrigatório para pessoa jurídica" }, 400);
  }
  if (data.tipo_pessoa === 'PF' && !data.cpf) {
    return c.json({ error: "CPF é obrigatório para pessoa física" }, 400);
  }
  
  // Verifica se documento já existe
  const existing = await db`
    SELECT fnc_pes_id FROM pessoas 
    WHERE (fnc_pes_cnpj = ${data.cnpj || null} OR fnc_pes_cpf = ${data.cpf || null})
    AND fnc_pes_tipo_cadastro = 'CLIENTE'
  `;
  
  if (existing.length) {
    return c.json({ error: "Cliente com este documento já existe" }, 400);
  }
  
  try {
    const [customer] = await db`
      INSERT INTO pessoas (
        fnc_emp_id,
        fnc_pes_data_cadastro,
        fnc_pes_tipo_cadastro,
        fnc_pes_tipo_pessoa,
        fnc_pes_nome_fantasia,
        fnc_pes_razao_social,
        fnc_pes_cpf,
        fnc_pes_cnpj,
        fnc_pes_ie,
        fnc_pes_insc_municipal,
        fnc_pes_cep,
        fnc_pes_endereco,
        fnc_pes_numero,
        fnc_pes_complemento,
        fnc_pes_bairro,
        fnc_pes_cidade,
        fnc_pes_uf,
        fnc_pes_latitude,
        fnc_pes_longitude,
        fnc_pes_telefone_1,
        fnc_pes_telefone_2,
        fnc_pes_celular,
        fnc_pes_email,
        fnc_pes_email_financeiro,
        fnc_pes_contato,
        fnc_pes_status,
        fnc_pes_limite_de_credito,
        fnc_pes_dh_atualizacao
      ) VALUES (
        ${data.emp_id || 1},
        CURRENT_DATE,
        'CLIENTE',
        ${data.tipo_pessoa},
        ${data.nome_fantasia},
        ${data.razao_social || data.nome_fantasia},
        ${data.cpf || null},
        ${data.cnpj || null},
        ${data.ie || null},
        ${data.insc_municipal || null},
        ${data.cep},
        ${data.endereco},
        ${data.numero},
        ${data.complemento || null},
        ${data.bairro},
        ${data.cidade},
        ${data.uf},
        ${data.latitude || null},
        ${data.longitude || null},
        ${data.telefone_1 || null},
        ${data.telefone_2 || null},
        ${data.celular || null},
        ${data.email},
        ${data.email_financeiro || null},
        ${data.contato || null},
        ${data.status || 'ATIVO'},
        ${data.limite_credito || 0},
        CURRENT_TIMESTAMP
      )
      RETURNING *
    `;
    
    return c.json(customer, 201);
  } catch (error) {
    console.error(error);
    return c.json({ error: "Erro ao criar cliente" }, 500);
  }
});

// Atualizar cliente
app.put("/customer/:id", async (c) => {
  const { id } = c.req.param();
  const data = await c.req.json();
  
  // Verifica se cliente existe
  const existing = await db`
    SELECT fnc_pes_id FROM pessoas 
    WHERE fnc_pes_id = ${id} 
    AND fnc_pes_tipo_cadastro = 'CLIENTE'
  `;
  
  if (!existing.length) {
    return c.json({ error: "Cliente não encontrado" }, 404);
  }
  
  // Se mudando documento, verifica duplicação
  if (data.cpf || data.cnpj) {
    const duplicate = await db`
      SELECT fnc_pes_id FROM pessoas 
      WHERE (fnc_pes_cnpj = ${data.cnpj || null} OR fnc_pes_cpf = ${data.cpf || null})
      AND fnc_pes_id != ${id}
      AND fnc_pes_tipo_cadastro = 'CLIENTE'
    `;
    
    if (duplicate.length) {
      return c.json({ error: "Documento já em uso" }, 400);
    }
  }
  
  try {
    const [updated] = await db`
      UPDATE pessoas
      SET 
        fnc_pes_tipo_pessoa = COALESCE(${data.tipo_pessoa}, fnc_pes_tipo_pessoa),
        fnc_pes_nome_fantasia = COALESCE(${data.nome_fantasia}, fnc_pes_nome_fantasia),
        fnc_pes_razao_social = COALESCE(${data.razao_social}, fnc_pes_razao_social),
        fnc_pes_cpf = COALESCE(${data.cpf}, fnc_pes_cpf),
        fnc_pes_cnpj = COALESCE(${data.cnpj}, fnc_pes_cnpj),
        fnc_pes_ie = COALESCE(${data.ie}, fnc_pes_ie),
        fnc_pes_insc_municipal = COALESCE(${data.insc_municipal}, fnc_pes_insc_municipal),
        fnc_pes_cep = COALESCE(${data.cep}, fnc_pes_cep),
        fnc_pes_endereco = COALESCE(${data.endereco}, fnc_pes_endereco),
        fnc_pes_numero = COALESCE(${data.numero}, fnc_pes_numero),
        fnc_pes_complemento = COALESCE(${data.complemento}, fnc_pes_complemento),
        fnc_pes_bairro = COALESCE(${data.bairro}, fnc_pes_bairro),
        fnc_pes_cidade = COALESCE(${data.cidade}, fnc_pes_cidade),
        fnc_pes_uf = COALESCE(${data.uf}, fnc_pes_uf),
        fnc_pes_latitude = COALESCE(${data.latitude}, fnc_pes_latitude),
        fnc_pes_longitude = COALESCE(${data.longitude}, fnc_pes_longitude),
        fnc_pes_telefone_1 = COALESCE(${data.telefone_1}, fnc_pes_telefone_1),
        fnc_pes_telefone_2 = COALESCE(${data.telefone_2}, fnc_pes_telefone_2),
        fnc_pes_celular = COALESCE(${data.celular}, fnc_pes_celular),
        fnc_pes_email = COALESCE(${data.email}, fnc_pes_email),
        fnc_pes_email_financeiro = COALESCE(${data.email_financeiro}, fnc_pes_email_financeiro),
        fnc_pes_contato = COALESCE(${data.contato}, fnc_pes_contato),
        fnc_pes_status = COALESCE(${data.status}, fnc_pes_status),
        fnc_pes_limite_de_credito = COALESCE(${data.limite_credito}, fnc_pes_limite_de_credito),
        fnc_pes_dh_atualizacao = CURRENT_TIMESTAMP
      WHERE fnc_pes_id = ${id}
      AND fnc_pes_tipo_cadastro = 'CLIENTE'
      RETURNING *
    `;
    
    return c.json(updated);
  } catch (error) {
    console.error(error);
    return c.json({ error: "Erro ao atualizar cliente" }, 500);
  }
});

// Deletar cliente (soft delete)
app.delete("/customer/:id", async (c) => {
  const { id } = c.req.param();
  
  const [result] = await db`
    UPDATE pessoas 
    SET fnc_pes_status = 'INATIVO', fnc_pes_dh_atualizacao = CURRENT_TIMESTAMP
    WHERE fnc_pes_id = ${id}
    AND fnc_pes_tipo_cadastro = 'CLIENTE'
    RETURNING fnc_pes_id
  `;
  
  if (!result) {
    return c.json({ error: "Cliente não encontrado" }, 404);
  }
  
  return c.json({ message: "Cliente desativado com sucesso" });
});

// --- SUPPLIERS ENDPOINTS ---

// Listar todos os fornecedores
app.get("/supplier", async (c) => {
  const { status, tipo_pessoa, limit, offset } = c.req.query();
  
  let conditions = [];
  let values = [];
  
  // Filtrar apenas fornecedores
  conditions.push("fnc_pes_tipo_cadastro = 'FORNECEDOR'");
  
  if (status) {
    conditions.push(`fnc_pes_status = $${conditions.length + 1}`);
    values.push(status);
  }
  
  if (tipo_pessoa) {
    conditions.push(`fnc_pes_tipo_pessoa = $${conditions.length + 1}`);
    values.push(tipo_pessoa);
  }
  
  const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';
  
  const query = `
    SELECT * FROM pessoas 
    ${whereClause}
    ORDER BY fnc_pes_nome_fantasia ASC 
    LIMIT ${limit || 100} 
    OFFSET ${offset || 0}
  `;
  
  const result = await db.unsafe(query, ...values);
  return c.json(result);
});

// Buscar fornecedor por ID
app.get("/supplier/:id", async (c) => {
  const { id } = c.req.param();
  const result = await db`
    SELECT * FROM pessoas 
    WHERE fnc_pes_id = ${id} 
    AND fnc_pes_tipo_cadastro = 'FORNECEDOR'
  `;
  
  if (!result.length) {
    return c.json({ error: "Fornecedor não encontrado" }, 404);
  }
  
  return c.json(result[0]);
});

// Buscar fornecedor por CNPJ/CPF
app.get("/supplier/document/:document", async (c) => {
  const { document } = c.req.param();
  const result = await db`
    SELECT * FROM pessoas 
    WHERE (fnc_pes_cnpj = ${document} OR fnc_pes_cpf = ${document})
    AND fnc_pes_tipo_cadastro = 'FORNECEDOR'
  `;
  
  if (!result.length) {
    return c.json({ error: "Fornecedor não encontrado" }, 404);
  }
  
  return c.json(result[0]);
});

// Criar novo fornecedor
app.post("/supplier", async (c) => {
  const data = await c.req.json();
  
  // Validação básica
  const requiredFields = ['tipo_pessoa', 'nome_fantasia', 'email', 'endereco', 'numero', 'bairro', 'cidade', 'uf', 'cep'];
  for (const field of requiredFields) {
    if (!data[field]) {
      return c.json({ error: `Campo ${field} é obrigatório` }, 400);
    }
  }
  
  // Validação de documento
  if (data.tipo_pessoa === 'PJ' && !data.cnpj) {
    return c.json({ error: "CNPJ é obrigatório para pessoa jurídica" }, 400);
  }
  if (data.tipo_pessoa === 'PF' && !data.cpf) {
    return c.json({ error: "CPF é obrigatório para pessoa física" }, 400);
  }
  
  // Verifica se documento já existe
  const existing = await db`
    SELECT fnc_pes_id FROM pessoas 
    WHERE (fnc_pes_cnpj = ${data.cnpj || null} OR fnc_pes_cpf = ${data.cpf || null})
    AND fnc_pes_tipo_cadastro = 'FORNECEDOR'
  `;
  
  if (existing.length) {
    return c.json({ error: "Fornecedor com este documento já existe" }, 400);
  }
  
  try {
    const [supplier] = await db`
      INSERT INTO pessoas (
        fnc_emp_id,
        fnc_pes_data_cadastro,
        fnc_pes_tipo_cadastro,
        fnc_pes_tipo_pessoa,
        fnc_pes_nome_fantasia,
        fnc_pes_razao_social,
        fnc_pes_cpf,
        fnc_pes_cnpj,
        fnc_pes_ie,
        fnc_pes_insc_municipal,
        fnc_pes_cep,
        fnc_pes_endereco,
        fnc_pes_numero,
        fnc_pes_complemento,
        fnc_pes_bairro,
        fnc_pes_cidade,
        fnc_pes_uf,
        fnc_pes_latitude,
        fnc_pes_longitude,
        fnc_pes_telefone_1,
        fnc_pes_telefone_2,
        fnc_pes_celular,
        fnc_pes_email,
        fnc_pes_email_financeiro,
        fnc_pes_contato,
        fnc_pes_status,
        fnc_pes_limite_de_credito,
        fnc_pes_dh_atualizacao
      ) VALUES (
        ${data.emp_id || 1},
        CURRENT_DATE,
        'FORNECEDOR',
        ${data.tipo_pessoa},
        ${data.nome_fantasia},
        ${data.razao_social || data.nome_fantasia},
        ${data.cpf || null},
        ${data.cnpj || null},
        ${data.ie || null},
        ${data.insc_municipal || null},
        ${data.cep},
        ${data.endereco},
        ${data.numero},
        ${data.complemento || null},
        ${data.bairro},
        ${data.cidade},
        ${data.uf},
        ${data.latitude || null},
        ${data.longitude || null},
        ${data.telefone_1 || null},
        ${data.telefone_2 || null},
        ${data.celular || null},
        ${data.email},
        ${data.email_financeiro || null},
        ${data.contato || null},
        ${data.status || 'ATIVO'},
        ${data.limite_credito || 0},
        CURRENT_TIMESTAMP
      )
      RETURNING *
    `;
    
    return c.json(supplier, 201);
  } catch (error) {
    console.error(error);
    return c.json({ error: "Erro ao criar fornecedor" }, 500);
  }
});

// Atualizar fornecedor
app.put("/supplier/:id", async (c) => {
  const { id } = c.req.param();
  const data = await c.req.json();
  
  // Verifica se fornecedor existe
  const existing = await db`
    SELECT fnc_pes_id FROM pessoas 
    WHERE fnc_pes_id = ${id} 
    AND fnc_pes_tipo_cadastro = 'FORNECEDOR'
  `;
  
  if (!existing.length) {
    return c.json({ error: "Fornecedor não encontrado" }, 404);
  }
  
  // Se mudando documento, verifica duplicação
  if (data.cpf || data.cnpj) {
    const duplicate = await db`
      SELECT fnc_pes_id FROM pessoas 
      WHERE (fnc_pes_cnpj = ${data.cnpj || null} OR fnc_pes_cpf = ${data.cpf || null})
      AND fnc_pes_id != ${id}
      AND fnc_pes_tipo_cadastro = 'FORNECEDOR'
    `;
    
    if (duplicate.length) {
      return c.json({ error: "Documento já em uso" }, 400);
    }
  }
  
  try {
    const [updated] = await db`
      UPDATE pessoas
      SET 
        fnc_pes_tipo_pessoa = COALESCE(${data.tipo_pessoa}, fnc_pes_tipo_pessoa),
        fnc_pes_nome_fantasia = COALESCE(${data.nome_fantasia}, fnc_pes_nome_fantasia),
        fnc_pes_razao_social = COALESCE(${data.razao_social}, fnc_pes_razao_social),
        fnc_pes_cpf = COALESCE(${data.cpf}, fnc_pes_cpf),
        fnc_pes_cnpj = COALESCE(${data.cnpj}, fnc_pes_cnpj),
        fnc_pes_ie = COALESCE(${data.ie}, fnc_pes_ie),
        fnc_pes_insc_municipal = COALESCE(${data.insc_municipal}, fnc_pes_insc_municipal),
        fnc_pes_cep = COALESCE(${data.cep}, fnc_pes_cep),
        fnc_pes_endereco = COALESCE(${data.endereco}, fnc_pes_endereco),
        fnc_pes_numero = COALESCE(${data.numero}, fnc_pes_numero),
        fnc_pes_complemento = COALESCE(${data.complemento}, fnc_pes_complemento),
        fnc_pes_bairro = COALESCE(${data.bairro}, fnc_pes_bairro),
        fnc_pes_cidade = COALESCE(${data.cidade}, fnc_pes_cidade),
        fnc_pes_uf = COALESCE(${data.uf}, fnc_pes_uf),
        fnc_pes_latitude = COALESCE(${data.latitude}, fnc_pes_latitude),
        fnc_pes_longitude = COALESCE(${data.longitude}, fnc_pes_longitude),
        fnc_pes_telefone_1 = COALESCE(${data.telefone_1}, fnc_pes_telefone_1),
        fnc_pes_telefone_2 = COALESCE(${data.telefone_2}, fnc_pes_telefone_2),
        fnc_pes_celular = COALESCE(${data.celular}, fnc_pes_celular),
        fnc_pes_email = COALESCE(${data.email}, fnc_pes_email),
        fnc_pes_email_financeiro = COALESCE(${data.email_financeiro}, fnc_pes_email_financeiro),
        fnc_pes_contato = COALESCE(${data.contato}, fnc_pes_contato),
        fnc_pes_status = COALESCE(${data.status}, fnc_pes_status),
        fnc_pes_limite_de_credito = COALESCE(${data.limite_credito}, fnc_pes_limite_de_credito),
        fnc_pes_dh_atualizacao = CURRENT_TIMESTAMP
      WHERE fnc_pes_id = ${id}
      AND fnc_pes_tipo_cadastro = 'FORNECEDOR'
      RETURNING *
    `;
    
    return c.json(updated);
  } catch (error) {
    console.error(error);
    return c.json({ error: "Erro ao atualizar fornecedor" }, 500);
  }
});

// Deletar fornecedor (soft delete)
app.delete("/supplier/:id", async (c) => {
  const { id } = c.req.param();
  
  const [result] = await db`
    UPDATE pessoas 
    SET fnc_pes_status = 'INATIVO', fnc_pes_dh_atualizacao = CURRENT_TIMESTAMP
    WHERE fnc_pes_id = ${id}
    AND fnc_pes_tipo_cadastro = 'FORNECEDOR'
    RETURNING fnc_pes_id
  `;
  
  if (!result) {
    return c.json({ error: "Fornecedor não encontrado" }, 404);
  }
  
  return c.json({ message: "Fornecedor desativado com sucesso" });
});

// --- Health check ---
app.get("/", (c) => c.text("API Customers Bun OK 🚀"));

// --- Serve ---
Bun.serve({
  fetch: app.fetch,
  port: Number(process.env.PORT || 3000),
});

export default app;