{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ Hono \} from "hono";\
import postgres from "postgres";\
\
const db = postgres(process.env.DATABASE_URL!, \{\
  ssl: \{ rejectUnauthorized: false \},\
\});\
const app = new Hono();\
\
// Todos os logs de auditoria\
app.get("/audit/logs", async (c) => \{\
  const \{ limit, offset \} = c.req.query();\
  const result = await db`\
    SELECT * FROM audit_logs \
    ORDER BY timestamp DESC \
    LIMIT $\{limit || 100\} \
    OFFSET $\{offset || 0\}\
  `;\
  return c.json(result);\
\});\
\
// Logs de auditoria por usu\'e1rio\
app.get("/audit/logs/user/:userId", async (c) => \{\
  const \{ userId \} = c.req.param();\
  const result = await db`\
    SELECT * FROM audit_logs \
    WHERE user_id = $\{userId\} \
    ORDER BY timestamp DESC\
  `;\
  return c.json(result);\
\});\
\
// Logs de auditoria por a\'e7\'e3o\
app.get("/audit/logs/action/:action", async (c) => \{\
  const \{ action \} = c.req.param();\
  const result = await db`\
    SELECT * FROM audit_logs \
    WHERE action = $\{action\} \
    ORDER BY timestamp DESC\
  `;\
  return c.json(result);\
\});\
\
// Logs de auditoria por per\'edodo\
app.get("/audit/logs/date-range", async (c) => \{\
  const \{ start, end \} = c.req.query();\
  if (!start || !end) return c.json(\{ error: "Missing start/end dates" \}, 400);\
\
  const result = await db`\
    SELECT * FROM audit_logs \
    WHERE timestamp BETWEEN $\{start\} AND $\{end\} \
    ORDER BY timestamp DESC\
  `;\
  return c.json(result);\
\});\
\
// Estat\'edsticas de auditoria\
app.get("/audit/stats", async (c) => \{\
  const total = await db`SELECT COUNT(*) AS total FROM audit_logs`;\
  const byUser = await db`\
    SELECT user_id, COUNT(*) as count \
    FROM audit_logs \
    GROUP BY user_id \
    ORDER BY count DESC\
    LIMIT 10\
  `;\
  const byAction = await db`\
    SELECT action, COUNT(*) as count \
    FROM audit_logs \
    GROUP BY action \
    ORDER BY count DESC\
  `;\
  const recent =\
    await db`SELECT COUNT(*) AS recent FROM audit_logs WHERE timestamp > NOW() - INTERVAL '24 hours'`;\
\
  return c.json(\{\
    total: total[0]?.total || 0,\
    byUser,\
    byAction,\
    recent: recent[0]?.recent || 0,\
  \});\
\});\
\
// Log de auditoria espec\'edfico\
app.get("/audit/logs/:id", async (c) => \{\
  const \{ id \} = c.req.param();\
  const result = await db`SELECT * FROM audit_logs WHERE id = $\{id\}`;\
  return c.json(result[0] || null);\
\});\
\
export default app;\
}