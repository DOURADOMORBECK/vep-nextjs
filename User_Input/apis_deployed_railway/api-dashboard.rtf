{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ Hono \} from "hono";\
import postgres from "postgres";\
\
const db = postgres(process.env.DATABASE_URL!, \{\
  ssl: \{ rejectUnauthorized: false \},\
\});\
const app = new Hono();\
\
// Estat\'edsticas do dashboard\
app.get("/dashboard/stats", async (c) => \{\
  // Contagem de pedidos\
  const orders = await db`SELECT COUNT(*) AS total FROM pedidos_venda_produtos`;\
\
  // Contagem de operadores (usu\'e1rios)\
  const operators = await db`SELECT COUNT(*) AS total FROM usuarios`;\
\
  // Contagem de produtos\
  const products = await db`SELECT COUNT(*) AS total FROM itens_pedido_venda`;\
\
  // Contagem de ve\'edculos\
  const vehicles =\
    await db`SELECT COUNT(DISTINCT id_tracked_unit) AS total FROM ssx_positions`;\
\
  // Contagem de clientes\
  const customers =\
    await db`SELECT COUNT(*) AS total FROM fnc_pessoas WHERE lat IS NOT NULL AND long IS NOT NULL`;\
\
  // Entregas recentes (\'faltimas 24h)\
  const recentDeliveries =\
    await db`SELECT COUNT(*) AS total FROM delivery_routes WHERE created_at > NOW() - INTERVAL '24 hours'`;\
\
  // Logs de auditoria recentes (\'faltimas 24h)\
  const recentAuditLogs =\
    await db`SELECT COUNT(*) AS total FROM audit_logs WHERE timestamp > NOW() - INTERVAL '24 hours'`;\
\
  return c.json(\{\
    orders: orders[0]?.total || 0,\
    operators: operators[0]?.total || 0,\
    products: products[0]?.total || 0,\
    vehicles: vehicles[0]?.total || 0,\
    customers: customers[0]?.total || 0,\
    recentDeliveries: recentDeliveries[0]?.total || 0,\
    recentAuditLogs: recentAuditLogs[0]?.total || 0,\
  \});\
\});\
\
// Estat\'edsticas de pedidos por status\
app.get("/dashboard/orders-by-status", async (c) => \{\
  const result =\
    await db`SELECT status, COUNT(*) as count FROM pedidos_venda_produtos GROUP BY status`;\
  return c.json(result);\
\});\
\
// Estat\'edsticas de itens por status\
app.get("/dashboard/items-by-status", async (c) => \{\
  const result =\
    await db`SELECT status, COUNT(*) as count FROM itens_pedido_venda GROUP BY status`;\
  return c.json(result);\
\});\
\
// Estat\'edsticas de entregas por status\
app.get("/dashboard/deliveries-by-status", async (c) => \{\
  const result =\
    await db`SELECT status, COUNT(*) as count FROM delivery_routes GROUP BY status`;\
  return c.json(result);\
\});\
\
// Atividade recente (\'faltimos 7 dias)\
app.get("/dashboard/recent-activity", async (c) => \{\
  const orders = await db`\
    SELECT DATE(data_pedido) as date, COUNT(*) as count \
    FROM pedidos_venda_produtos \
    WHERE data_pedido > NOW() - INTERVAL '7 days' \
    GROUP BY DATE(data_pedido) \
    ORDER BY date\
  `;\
\
  const deliveries = await db`\
    SELECT DATE(created_at) as date, COUNT(*) as count \
    FROM delivery_routes \
    WHERE created_at > NOW() - INTERVAL '7 days' \
    GROUP BY DATE(created_at) \
    ORDER BY date\
  `;\
\
  const auditLogs = await db`\
    SELECT DATE(timestamp) as date, COUNT(*) as count \
    FROM audit_logs \
    WHERE timestamp > NOW() - INTERVAL '7 days' \
    GROUP BY DATE(timestamp) \
    ORDER BY date\
  `;\
\
  return c.json(\{ orders, deliveries, auditLogs \});\
\});\
\
export default app;\
}