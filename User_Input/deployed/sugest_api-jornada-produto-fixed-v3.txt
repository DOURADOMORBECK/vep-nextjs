import { Hono } from "hono";
import { cors } from "hono/cors";
import postgres from "postgres";

// --- DB Connection ---
const db = postgres(process.env.DATABASE_URL!, {
  ssl: { rejectUnauthorized: false },
});

// --- App ---
const app = new Hono();

// --- CORS Middleware ---
app.use("/*", cors());

// --- Health Check ---
app.get("/", (c) => c.text("API Jornada Produto V3 OK ðŸš€"));

// --- Health endpoint ---
app.get('/health', async (c) => {
  try {
    await db`SELECT 1`;
    return c.json({ 
      status: 'healthy',
      service: 'jornada-produto-api',
      timestamp: new Date().toISOString(),
      database: 'connected'
    });
  } catch (error: any) {
    return c.json({ 
      status: 'unhealthy',
      service: 'jornada-produto-api',
      timestamp: new Date().toISOString(),
      database: 'disconnected',
      error: error.message
    }, 503);
  }
});

// --- Create produtos table if not exists ---
await db`
  CREATE TABLE IF NOT EXISTS produtos (
    id SERIAL PRIMARY KEY,
    nome TEXT NOT NULL,
    descricao TEXT,
    preco NUMERIC(10,2),
    estoque INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )
`;

// --- PRODUTOS ---
// Listar todos os produtos
app.get("/produto", async (c) => {
  try {
    const result = await db`SELECT * FROM produtos ORDER BY id DESC`;
    return c.json(result);
  } catch (error) {
    console.error("Error fetching products:", error);
    return c.json({ error: "Erro ao buscar produtos" }, 500);
  }
});

// Buscar produto especÃ­fico
app.get("/produto/:id", async (c) => {
  try {
    const { id } = c.req.param();
    const result = await db`SELECT * FROM produtos WHERE id = ${id}`;
    return c.json(result[0] || null);
  } catch (error) {
    console.error("Error fetching product:", error);
    return c.json({ error: "Erro ao buscar produto" }, 500);
  }
});

// Criar produto
app.post("/produto", async (c) => {
  try {
    const body = await c.req.json();
    const result = await db`
      INSERT INTO produtos (nome, descricao, preco, estoque)
      VALUES (${body.nome}, ${body.descricao}, ${body.preco}, ${body.estoque})
      RETURNING *
    `;
    return c.json(result[0]);
  } catch (error) {
    console.error("Error creating product:", error);
    return c.json({ error: "Erro ao criar produto" }, 500);
  }
});

// Atualizar produto
app.put("/produto/:id", async (c) => {
  try {
    const { id } = c.req.param();
    const body = await c.req.json();
    const result = await db`
      UPDATE produtos 
      SET nome = ${body.nome}, descricao = ${body.descricao}, 
          preco = ${body.preco}, estoque = ${body.estoque}
      WHERE id = ${id}
      RETURNING *
    `;
    return c.json(result[0] || null);
  } catch (error) {
    console.error("Error updating product:", error);
    return c.json({ error: "Erro ao atualizar produto" }, 500);
  }
});

// Deletar produto
app.delete("/produto/:id", async (c) => {
  try {
    const { id } = c.req.param();
    const result = await db`DELETE FROM produtos WHERE id = ${id} RETURNING *`;
    return c.json(result[0] || null);
  } catch (error) {
    console.error("Error deleting product:", error);
    return c.json({ error: "Erro ao deletar produto" }, 500);
  }
});

// --- JORNADA PRODUTO (rotas originais) ---
// Todos os pedidos de venda
app.get("/jornada-produto/orders", async (c) => {
  try {
    const { status, limit, offset } = c.req.query();
    let query;

    if (status) {
      query = db`SELECT * FROM pedidos_venda_produtos WHERE status = ${status} ORDER BY data_pedido DESC LIMIT ${
        limit || 100
      } OFFSET ${offset || 0}`;
    } else {
      query = db`SELECT * FROM pedidos_venda_produtos ORDER BY data_pedido DESC LIMIT ${
        limit || 100
      } OFFSET ${offset || 0}`;
    }

    const result = await query;
    return c.json(result);
  } catch (error) {
    console.error("Error fetching orders:", error);
    return c.json({ error: "Erro ao buscar pedidos" }, 500);
  }
});

// Pedido especÃ­fico
app.get("/jornada-produto/orders/:orderId", async (c) => {
  try {
    const { orderId } = c.req.param();
    const result =
      await db`SELECT * FROM pedidos_venda_produtos WHERE id_pedido = ${orderId}`;
    return c.json(result[0] || null);
  } catch (error) {
    console.error("Error fetching order:", error);
    return c.json({ error: "Erro ao buscar pedido" }, 500);
  }
});

// Itens de um pedido especÃ­fico
app.get("/jornada-produto/orders/:orderId/items", async (c) => {
  try {
    const { orderId } = c.req.param();
    const result =
      await db`SELECT * FROM itens_pedido_venda WHERE id_pedido = ${orderId} ORDER BY sequencia`;
    return c.json(result);
  } catch (error) {
    console.error("Error fetching order items:", error);
    return c.json({ error: "Erro ao buscar itens do pedido" }, 500);
  }
});

// Todos os itens
app.get("/jornada-produto/items", async (c) => {
  try {
    const { status, limit, offset } = c.req.query();
    let query;

    if (status) {
      query = db`SELECT * FROM itens_pedido_venda WHERE status = ${status} ORDER BY data_criacao DESC LIMIT ${
        limit || 100
      } OFFSET ${offset || 0}`;
    } else {
      query = db`SELECT * FROM itens_pedido_venda ORDER BY data_criacao DESC LIMIT ${
        limit || 100
      } OFFSET ${offset || 0}`;
    }

    const result = await query;
    return c.json(result);
  } catch (error) {
    console.error("Error fetching items:", error);
    return c.json({ error: "Erro ao buscar itens" }, 500);
  }
});

// Item especÃ­fico
app.get("/jornada-produto/items/:itemId", async (c) => {
  try {
    const { itemId } = c.req.param();
    const result =
      await db`SELECT * FROM itens_pedido_venda WHERE id_item = ${itemId}`;
    return c.json(result[0] || null);
  } catch (error) {
    console.error("Error fetching item:", error);
    return c.json({ error: "Erro ao buscar item" }, 500);
  }
});

// EstatÃ­sticas da jornada
app.get("/jornada-produto/stats", async (c) => {
  try {
    const totalOrders =
      await db`SELECT COUNT(*) AS total FROM pedidos_venda_produtos`;
    const totalItems = await db`SELECT COUNT(*) AS total FROM itens_pedido_venda`;
    const ordersByStatus =
      await db`SELECT status, COUNT(*) as count FROM pedidos_venda_produtos GROUP BY status`;
    const itemsByStatus =
      await db`SELECT status, COUNT(*) as count FROM itens_pedido_venda GROUP BY status`;

    return c.json({
      totalOrders: totalOrders[0]?.total || 0,
      totalItems: totalItems[0]?.total || 0,
      ordersByStatus,
      itemsByStatus,
    });
  } catch (error) {
    console.error("Error fetching stats:", error);
    return c.json({ error: "Erro ao buscar estatÃ­sticas" }, 500);
  }
});

// Atualizar status de um pedido
app.put("/jornada-produto/orders/:orderId/status", async (c) => {
  try {
    const { orderId } = c.req.param();
    const { status } = await c.req.json();

    const result = await db`
      UPDATE pedidos_venda_produtos 
      SET status = ${status}, data_atualizacao = NOW() 
      WHERE id_pedido = ${orderId} 
      RETURNING *
    `;

    return c.json(result[0] || null);
  } catch (error) {
    console.error("Error updating order status:", error);
    return c.json({ error: "Erro ao atualizar status do pedido" }, 500);
  }
});

// Atualizar status de um item
app.put("/jornada-produto/items/:itemId/status", async (c) => {
  try {
    const { itemId } = c.req.param();
    const { status } = await c.req.json();

    const result = await db`
      UPDATE itens_pedido_venda 
      SET status = ${status}, data_atualizacao = NOW() 
      WHERE id_item = ${itemId} 
      RETURNING *
    `;

    return c.json(result[0] || null);
  } catch (error) {
    console.error("Error updating item status:", error);
    return c.json({ error: "Erro ao atualizar status do item" }, 500);
  }
});

// --- Serve ---
Bun.serve({
  fetch: app.fetch,
  port: Number(process.env.PORT || 3000),
});